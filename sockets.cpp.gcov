        -:    0:Source:sockets.cpp
        -:    0:Graph:mync.gcno
        -:    0:Data:mync.gcda
        -:    0:Runs:19
        -:    1:#include <iostream>
        -:    2:#include <cstdlib>
        -:    3:#include <cstdio>
        -:    4:#include <sys/wait.h>
        -:    5:#include <fcntl.h>
        -:    6:#include <vector>
        -:    7:#include <cstring>
        -:    8:#include <netinet/in.h>
        -:    9:#include <sys/socket.h>
        -:   10:#include <unistd.h>
        -:   11:#include <arpa/inet.h>
        -:   12:#include <csignal>
        -:   13:#include <sys/un.h>
        -:   14:using namespace std;
        -:   15:
        -:   16:// .------..------..------.
        -:   17:// |T.--. ||C.--. ||P.--. |
        -:   18:// | :/\: || :/\: || :/\: |
        -:   19:// | (__) || :\/: || (__) |
        -:   20:// | '--'T|| '--'C|| '--'P|
        -:   21:// `------'`------'`------'
        -:   22:
        -:   23:// will open a server tcp socket to transfer the data from one end to another.
        3:   24:int server_tcp_socket(int port)
        -:   25:{
        3:   26:    int serverSocket = socket(AF_INET, SOCK_STREAM, 0);
        -:   27:    sockaddr_in serverAddress;
        3:   28:    serverAddress.sin_family = AF_INET;
        3:   29:    serverAddress.sin_port = htons(port);
        3:   30:    serverAddress.sin_addr.s_addr = INADDR_ANY;
        3:   31:    if (bind(serverSocket, (struct sockaddr *)&serverAddress, sizeof(serverAddress)) < 0)
        -:   32:    {
    #####:   33:        cout << "Error";
    #####:   34:        exit(1);
        -:   35:    }
        3:   36:    listen(serverSocket, 1);
        3:   37:    return serverSocket;
        -:   38:}
        -:   39:
        -:   40:// will open a client tcp socket to transfer the data from one end to another.
        4:   41:int client_tcp_socket(int port)
        -:   42:{
        -:   43:    int clientSocket;
        -:   44:    struct sockaddr_in client_addr;
        4:   45:    if ((clientSocket = socket(AF_INET, SOCK_STREAM, 0)) == -1)
        -:   46:    {
    #####:   47:        perror("socket");
    #####:   48:        exit(1);
        -:   49:    }
        4:   50:    memset(&(client_addr.sin_zero), '\0', 8);
        4:   51:    client_addr.sin_family = AF_INET;
        4:   52:    client_addr.sin_port = htons(port);
        4:   53:    client_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        4:   54:    if (connect(clientSocket, (struct sockaddr *)&client_addr, sizeof(struct sockaddr)) == -1)
        -:   55:    {
    #####:   56:        perror("connect");
    #####:   57:        exit(1);
        -:   58:    }
        4:   59:    return clientSocket;
        -:   60:}
        -:   61:
        -:   62:// .------..------..------.
        -:   63:// |U.--. ||D.--. ||P.--. |
        -:   64:// | (\/) || :/\: || :/\: |
        -:   65:// | :\/: || (__) || (__) |
        -:   66:// | '--'U|| '--'D|| '--'P|
        -:   67:// `------'`------'`------'
        -:   68:
        -:   69:// will open a udp server socket
        1:   70:int server_udp_socket(int port)
        -:   71:{
        1:   72:    int serverSocket = socket(AF_INET, SOCK_DGRAM, 0);
        1:   73:    if (serverSocket < 0)
        -:   74:    {
    #####:   75:        std::cerr << "Error: Unable to create socket" << std::endl;
    #####:   76:        exit(1);
        -:   77:    }
        -:   78:    sockaddr_in serverAddress;
        1:   79:    serverAddress.sin_family = AF_INET;
        1:   80:    serverAddress.sin_port = htons(port);
        1:   81:    serverAddress.sin_addr.s_addr = INADDR_ANY;
        1:   82:    if (bind(serverSocket, (struct sockaddr *)&serverAddress, sizeof(serverAddress)) < 0)
        -:   83:    {
    #####:   84:        std::cerr << "Error: Unable to bind socket" << std::endl;
    #####:   85:        close(serverSocket);
    #####:   86:        exit(1);
        -:   87:    }
        1:   88:    return serverSocket;
        -:   89:}
        -:   90:
        -:   91:// will open a udp client socket.
        2:   92:int client_udp_socket(const char *server_ip, int port)
        -:   93:{
        2:   94:    int clientSocket = socket(AF_INET, SOCK_DGRAM, 0);
        2:   95:    if (clientSocket < 0)
        -:   96:    {
    #####:   97:        std::cerr << "Error: Unable to create socket" << std::endl;
    #####:   98:        exit(1);
        -:   99:    }
        2:  100:    return clientSocket;
        -:  101:}
        -:  102:
        -:  103:// .------..------..------.
        -:  104:// |U.--. ||D.--. ||S.--. |
        -:  105:// | (\/) || :/\: || :/\: |
        -:  106:// | :\/: || (__) || :\/: |
        -:  107:// | '--'U|| '--'D|| '--'S|
        -:  108:// `------'`------'`------'
        -:  109:
        2:  110:int server_udsd(const char *path)
        -:  111:{
        -:  112:    int serverSocket;
        -:  113:    struct sockaddr_un addr;
        2:  114:    if ((serverSocket = socket(AF_UNIX, SOCK_DGRAM, 0)) == -1)
        -:  115:    {
    #####:  116:        perror("socket error");
    #####:  117:        exit(-1);
        -:  118:    }
        2:  119:    memset(&addr, 0, sizeof(addr));
        2:  120:    addr.sun_family = AF_UNIX;
        2:  121:    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);
        2:  122:    unlink(path);
        2:  123:    if (bind(serverSocket, (struct sockaddr *)&addr, sizeof(addr)) == -1)
        -:  124:    {
    #####:  125:        perror("bind error");
    #####:  126:        close(serverSocket);
    #####:  127:        exit(-1);
        -:  128:    }
        2:  129:    return serverSocket;
        -:  130:}
        -:  131:
        1:  132:int client_udsd(const char *path)
        -:  133:{
        1:  134:    int clientSocket = socket(AF_UNIX, SOCK_DGRAM, 0);
        1:  135:    if (clientSocket < 0)
        -:  136:    {
    #####:  137:        std::cerr << "Error: Unable to create socket" << std::endl;
    #####:  138:        exit(1);
        -:  139:    }
        -:  140:    struct sockaddr_un serverAddress;
        1:  141:    memset(&serverAddress, 0, sizeof(serverAddress));
        1:  142:    serverAddress.sun_family = AF_UNIX;
        1:  143:    strncpy(serverAddress.sun_path, path, sizeof(serverAddress.sun_path) - 1);
        1:  144:    if (connect(clientSocket, (struct sockaddr *)&serverAddress, sizeof(serverAddress)) < 0)
        -:  145:    {
    #####:  146:        perror("connect error");
    #####:  147:        close(clientSocket);
    #####:  148:        exit(1);
        -:  149:    }
        1:  150:    return clientSocket;
        -:  151:}
        -:  152:
        3:  153:int server_udss(const char *path)
        -:  154:{
        -:  155:    int serverSocket;
        -:  156:    struct sockaddr_un addr;
        3:  157:    if ((serverSocket = socket(AF_UNIX, SOCK_STREAM, 0)) == -1)
        -:  158:    {
    #####:  159:        perror("socket error");
    #####:  160:        exit(-1);
        -:  161:    }
        3:  162:    memset(&addr, 0, sizeof(addr));
        3:  163:    addr.sun_family = AF_UNIX;
        3:  164:    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);
        3:  165:    unlink(path);
        3:  166:    if (bind(serverSocket, (struct sockaddr *)&addr, sizeof(addr)) == -1)
        -:  167:    {
    #####:  168:        perror("bind error");
    #####:  169:        close(serverSocket);
    #####:  170:        exit(-1);
        -:  171:    }
        3:  172:    if (listen(serverSocket, 5) == -1)
        -:  173:    {
    #####:  174:        perror("listen error");
    #####:  175:        close(serverSocket);
    #####:  176:        exit(-1);
        -:  177:    }
        3:  178:    return serverSocket;
        -:  179:}
        -:  180:
        3:  181:int client_udss(const char *path)
        -:  182:{
        3:  183:    int clientSocket = socket(AF_UNIX, SOCK_STREAM, 0);
        3:  184:    if (clientSocket < 0)
        -:  185:    {
    #####:  186:        std::cerr << "Error: Unable to create socket. Errno: " << errno << std::endl;
    #####:  187:        exit(1);
        -:  188:    }
        -:  189:    struct sockaddr_un serverAddress;
        3:  190:    memset(&serverAddress, 0, sizeof(serverAddress));
        3:  191:    serverAddress.sun_family = AF_UNIX;
        3:  192:    strncpy(serverAddress.sun_path, path, sizeof(serverAddress.sun_path) - 1);
        3:  193:    if (connect(clientSocket, (struct sockaddr *)&serverAddress, sizeof(serverAddress)) < 0)
        -:  194:    {
    #####:  195:        cerr << "Error: Unable to connect to server. Errno: " << errno << std::endl;
    #####:  196:        perror("connect error");
    #####:  197:        close(clientSocket);
    #####:  198:        exit(1);
        -:  199:    }
        3:  200:    return clientSocket;
        -:  201:}
