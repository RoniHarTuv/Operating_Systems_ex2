        -:    0:Source:mync.cpp
        -:    0:Graph:mync.gcno
        -:    0:Data:mync.gcda
        -:    0:Runs:19
        -:    1:#include "sockets.cpp"
        -:    2:using namespace std;
        -:    3:
        -:    4:// will execute the ttt game by -e flag in the command line
       18:    5:int exe_ttt(char *eflag)
        -:    6:{
       18:    7:    string add_to_command = eflag;
       18:    8:    string command = "./" + add_to_command;
       18:    9:    execlp("bash", "bash", "-c", command.c_str(), NULL);
    #####:   10:    return 0;
      18*:   11:}
        -:   12:
        -:   13:// this function will determine the type of the socket that we will want to open.
        -:   14:// will be responsoble to tell if its - udp/tcp/uds socket.
       18:   15:char *determine_type(char *optarg)
        -:   16:{
       18:   17:    const char *validStrings[] = {
        -:   18:        "TCPS", "TCPC", "UDPS", "UDPC", "UDSSD", "UDSCD", "UDSSS", "UDSCS"};
       60:   19:    for (const auto &validString : validStrings)
        -:   20:    {
       60:   21:        if (strncmp(optarg, validString, 3) == 0)
        -:   22:        {
       18:   23:            return optarg;
        -:   24:        }
        -:   25:    }
    #####:   26:    return nullptr;
        -:   27:}
        -:   28:
        -:   29:// this function will be called if we call mync with the
        -:   30:// i flag to run the code and want to use the tcp functionality.
        2:   31:void tcp_i(bool isServer, char *port)
        -:   32:{
        2:   33:    int clintsock = 0;
        2:   34:    int serverSocket = 0;
        2:   35:    if (isServer) // server case
        -:   36:    {
        1:   37:        serverSocket = server_tcp_socket(atoi(port));
        1:   38:        clintsock = accept(serverSocket, 0, 0);
        -:   39:    }
        -:   40:    else // client case
        -:   41:    {
        1:   42:        clintsock = client_tcp_socket(atoi(port));
        -:   43:    }
        2:   44:    dup2(clintsock, STDIN_FILENO);
        2:   45:}
        -:   46:
        -:   47:// this function will be called if we call mync with the
        -:   48:// i flag to run the code and want to use the udp functionality.
        1:   49:void udp_i(char *port, char *timeout)
        -:   50:{
        -:   51:    int udp_socket;
        1:   52:    udp_socket = server_udp_socket(atoi(port));
        1:   53:    if (timeout != nullptr)
        1:   54:        alarm(atoi(timeout));
        1:   55:    dup2(udp_socket, STDIN_FILENO);
        1:   56:}
        -:   57:
        -:   58:// this function will be called if we call mync with the
        -:   59:// i flag to run the code and want to use the uds data gram functionality.
        2:   60:void udsd_i(char *path, char *timeout)
        -:   61:{
        2:   62:    int udsd_socket = server_udsd(path);
        2:   63:    if (timeout != nullptr)
        -:   64:    {
        1:   65:        alarm(atoi(timeout));
        -:   66:    }
        2:   67:    dup2(udsd_socket, STDIN_FILENO);
        2:   68:}
        -:   69:
        1:   70:void udsss_i(char *path)
        -:   71:{
        1:   72:    int clintsock = 0;
        1:   73:    int udsss_socket = server_udss(path);
        1:   74:    clintsock = accept(udsss_socket, NULL, NULL);
        1:   75:    if (clintsock == -1)
        -:   76:    {
    #####:   77:        perror("accept error");
    #####:   78:        close(udsss_socket);
    #####:   79:        exit(-1);
        -:   80:    }
        1:   81:    dup2(clintsock, STDIN_FILENO);
        1:   82:}
        -:   83:
        1:   84:void udscs_i(char *path)
        -:   85:{
        -:   86:    int udcs_socket;
        1:   87:    udcs_socket = client_udss(path);
        -:   88:    sockaddr_un serverAddress;
        1:   89:    serverAddress.sun_family = AF_UNIX;
        1:   90:    strncpy(serverAddress.sun_path, path, sizeof(serverAddress.sun_path) - 1);
        1:   91:    connect(udcs_socket, (struct sockaddr *)&serverAddress, sizeof(serverAddress));
        1:   92:    dup2(udcs_socket, STDIN_FILENO);
        1:   93:}
        -:   94:
        -:   95:/* the  i flag handler, will be used if in the command line the i flag exist.
        -:   96:will transfer the input of the program by using the dup function.
        -:   97:*/
        7:   98:int i_flag(char *input, char *timeout)
        -:   99:{
        -:  100:    char *port;
        7:  101:    bool isServer = (input[3] == 'S');
        7:  102:    if (isServer)
        -:  103:    {
        5:  104:        port = input + 4;
        -:  105:    }
        -:  106:    else
        -:  107:    {
        2:  108:        port = input + 14;
        -:  109:    }
        7:  110:    char *type = determine_type(input);
        7:  111:    if (strncmp(type, "TCP", 3) == 0) // tcp part (q3)
        -:  112:    {
        2:  113:        tcp_i(isServer, port);
        -:  114:    }
        5:  115:    else if (strncmp(type, "UDP", 3) == 0) // udp part (q4)
        -:  116:    {
        1:  117:        udp_i(port, timeout);
        -:  118:    }
        4:  119:    else if (strncmp(type, "UDSSD", 5) == 0) // uds dgram (q6)
        -:  120:    {
        2:  121:        udsd_i(input + 5, timeout);
        -:  122:    }
        2:  123:    else if (strncmp(type, "UDSSS", 5) == 0) // uds stream server (q6)
        -:  124:    {
        1:  125:        udsss_i(input + 5);
        -:  126:    }
        1:  127:    else if (strncmp(type, "UDSCS", 5) == 0) // uds stream server (q6)
        -:  128:    {
        1:  129:        udscs_i(input + 5);
        -:  130:    }
        7:  131:    return 0;
        -:  132:}
        -:  133:
        -:  134:// will be responisble for the tcp part of the code of the -o flag
        2:  135:void tcp_o(bool isServer, char *port)
        -:  136:{
        2:  137:    int clintsock = 0;
        2:  138:    int serverSocket = 0;
        2:  139:    if (isServer) // server case
        -:  140:    {
        1:  141:        serverSocket = server_tcp_socket(atoi(port));
        1:  142:        clintsock = accept(serverSocket, 0, 0);
        -:  143:    }
        -:  144:    else // client case
        -:  145:    {
        1:  146:        clintsock = client_tcp_socket(atoi(port));
        -:  147:    }
        2:  148:    dup2(clintsock, STDOUT_FILENO);
        2:  149:}
        -:  150:
        -:  151://// will be responisble for the udp part of the code of the -o flag!
        -:  152:// only client can connect with the -o flag.
        2:  153:void udp_o(char *port, char *timeout)
        -:  154:{
        -:  155:    int udp_socket;
        2:  156:    udp_socket = client_udp_socket("127.0.0.1", atoi(port));
        -:  157:    sockaddr_in serverAddress;
        2:  158:    serverAddress.sin_family = AF_INET;
        2:  159:    serverAddress.sin_port = htons(atoi(port));
        2:  160:    if (inet_pton(AF_INET, "127.0.0.1", &serverAddress.sin_addr) <= 0)
        -:  161:    {
    #####:  162:        cout << "Error: Invalid address/ Address not supported" << std::endl;
    #####:  163:        close(udp_socket);
    #####:  164:        exit(1);
        -:  165:    }
        2:  166:    if (timeout != nullptr)
        1:  167:        alarm(atoi(timeout));
        2:  168:    connect(udp_socket, (struct sockaddr *)&serverAddress, sizeof(serverAddress));
        2:  169:    dup2(udp_socket, STDOUT_FILENO);
        2:  170:}
        -:  171:
        -:  172://// will be responisble for the uds data gram part of the code of the -o flag!
        -:  173:// only client can connect with the -o flag and uds datagram.
        1:  174:void udcd_o(char *path, char *timeout)
        -:  175:{
        -:  176:    int udcd_socket;
        1:  177:    udcd_socket = client_udsd(path);
        -:  178:    sockaddr_un serverAddress;
        1:  179:    serverAddress.sun_family = AF_INET;
        1:  180:    strncpy(serverAddress.sun_path, path, sizeof(serverAddress.sun_path) - 1);
        1:  181:    if (timeout != nullptr)
        1:  182:        alarm(atoi(timeout));
        1:  183:    connect(udcd_socket, (struct sockaddr *)&serverAddress, sizeof(serverAddress));
        1:  184:    dup2(udcd_socket, STDOUT_FILENO);
        1:  185:}
        -:  186:
        1:  187:void udsss_o(char *path)
        -:  188:{
        1:  189:    cout << path;
        1:  190:    int clintsock = 0;
        1:  191:    int udsss_socket = server_udss(path);
        1:  192:    clintsock = accept(udsss_socket, NULL, NULL);
        1:  193:    if (clintsock == -1)
        -:  194:    {
    #####:  195:        perror("accept error");
    #####:  196:        close(udsss_socket);
    #####:  197:        exit(-1);
        -:  198:    }
        1:  199:    dup2(clintsock, STDOUT_FILENO);
        1:  200:}
        -:  201:
        1:  202:void udscs_o(char *path)
        -:  203:{
        -:  204:    int udcs_socket;
        1:  205:    udcs_socket = client_udss(path);
        -:  206:    sockaddr_un serverAddress;
        1:  207:    serverAddress.sun_family = AF_UNIX;
        1:  208:    strncpy(serverAddress.sun_path, path, sizeof(serverAddress.sun_path) - 1);
        1:  209:    connect(udcs_socket, (struct sockaddr *)&serverAddress, sizeof(serverAddress));
        1:  210:    dup2(udcs_socket, STDOUT_FILENO);
        1:  211:}
        -:  212:
        -:  213:/* The o flag handler, will be used if in the command line the o flag exist.
        -:  214:will transfer the output of the program by using the dup function.
        -:  215:*/
        7:  216:int o_flag(char *output, char *timeout)
        -:  217:{
        -:  218:    char *port;
        7:  219:    bool isServer = (output[3] == 'S');
        7:  220:    if (isServer)
        -:  221:    {
        2:  222:        port = output + 4;
        -:  223:    }
        -:  224:    else
        -:  225:    {
        5:  226:        port = output + 14;
        -:  227:    }
        7:  228:    char *type = determine_type(output);
        7:  229:    if (strncmp(type, "TCP", 3) == 0) // tcp part (q3)
        -:  230:    {
        2:  231:        tcp_o(isServer, port);
        -:  232:    }
        5:  233:    else if (strncmp(type, "UDP", 3) == 0) // udp part (q4)
        -:  234:    {
        2:  235:        udp_o(port, timeout);
        -:  236:    }
        3:  237:    else if (strncmp(type, "UDSCD", 5) == 0) // udsd part (q6)
        -:  238:    {
        1:  239:        udcd_o(output + 5, timeout);
        -:  240:    }
        2:  241:    else if (strncmp(type, "UDSSS", 5) == 0) // uds stream server (q6)
        -:  242:    {
        1:  243:        udsss_o(output + 5);
        -:  244:    }
        1:  245:    else if (strncmp(type, "UDSCS", 5) == 0) // uds stream server (q6)
        -:  246:    {
        1:  247:        udscs_o(output + 5);
        -:  248:    }
        7:  249:    return 0;
        -:  250:}
        -:  251:
        1:  252:void udsss_b(char *path)
        -:  253:{
        1:  254:    cout << path;
        1:  255:    int clintsock = 0;
        1:  256:    int udsss_socket = server_udss(path);
        1:  257:    clintsock = accept(udsss_socket, NULL, NULL);
        1:  258:    if (clintsock == -1)
        -:  259:    {
    #####:  260:        perror("accept error");
    #####:  261:        close(udsss_socket);
    #####:  262:        exit(-1);
        -:  263:    }
        1:  264:    dup2(clintsock, STDIN_FILENO);
        1:  265:    dup2(clintsock, STDOUT_FILENO);
        1:  266:}
        -:  267:
        1:  268:void udscs_b(char *path)
        -:  269:{
        -:  270:    int udcs_socket;
        1:  271:    udcs_socket = client_udss(path);
        -:  272:    sockaddr_un serverAddress;
        1:  273:    serverAddress.sun_family = AF_UNIX;
        1:  274:    strncpy(serverAddress.sun_path, path, sizeof(serverAddress.sun_path) - 1);
        1:  275:    connect(udcs_socket, (struct sockaddr *)&serverAddress, sizeof(serverAddress));
        1:  276:    dup2(udcs_socket, STDIN_FILENO);
        1:  277:    dup2(udcs_socket, STDOUT_FILENO);
        1:  278:}
        -:  279:
        -:  280:/* The b flag handler, will be used if in the command line the b flag exist.
        -:  281:will transfer the input and the output of the program by using the dup function.
        -:  282:*/
        4:  283:int b_flag(char *both)
        -:  284:{
        -:  285:    char *port;
        -:  286:    int clintsock;
        -:  287:    int serverSocket;
        4:  288:    char *type = determine_type(both);
        4:  289:    bool isServer = (both[3] == 'S');
        4:  290:    if (isServer)
        -:  291:    {
        2:  292:        port = both + 4;
        -:  293:    }
        -:  294:    else
        -:  295:    {
        2:  296:        port = both + 14;
        -:  297:    }
        4:  298:    if (strncmp(type, "TCP", 3) == 0)
        -:  299:    {
        2:  300:        if (isServer) // server case
        -:  301:        {
        1:  302:            serverSocket = server_tcp_socket(atoi(port));
        1:  303:            clintsock = accept(serverSocket, 0, 0);
        -:  304:        }
        -:  305:        else // client case
        -:  306:        {
        1:  307:            clintsock = client_tcp_socket(atoi(port));
        -:  308:        }
        2:  309:        dup2(clintsock, STDIN_FILENO);
        2:  310:        dup2(clintsock, STDOUT_FILENO);
        -:  311:    }
        2:  312:    else if (strncmp(type, "UDSSS", 5) == 0) // uds stream server (q6)
        -:  313:    {
        1:  314:        udsss_b(both + 5);
        -:  315:    }
        1:  316:    else if (strncmp(type, "UDSCS", 5) == 0) // uds stream server (q6)
        -:  317:    {
        1:  318:        udscs_b(both + 5);
        -:  319:    }
        4:  320:    return 0;
        -:  321:}
        -:  322:
        -:  323:/*will be responsible for splitig each command that comes after the flag.
        -:  324:note that more than one flag can be used and the getopt function will hendle
        -:  325:all the flags that exist in the command line(even more than one).
        -:  326:*/
        -:  327:
       19:  328:void flags_detector(int argc, char *argv[], char *&eflag, char *&input, char *&output, char *&both, int &opt, char *&timeout)
        -:  329:{
       59:  330:    while ((opt = getopt(argc, argv, "e:i:o:b:t:")) != -1)
        -:  331:    {
       40:  332:        switch (opt)
        -:  333:        {
       18:  334:        case 'e':
       18:  335:            eflag = optarg;
       18:  336:            break;
        7:  337:        case 'i':
        7:  338:            input = optarg;
        7:  339:            break;
        7:  340:        case 'o':
        7:  341:            output = optarg;
        7:  342:            break;
        4:  343:        case 'b':
        4:  344:            both = optarg;
        4:  345:            break;
        4:  346:        case 't':
        4:  347:            timeout = optarg;
        4:  348:            break;
    #####:  349:        default:
    #####:  350:            break;
        -:  351:        }
        -:  352:    }
       19:  353:}
        -:  354:
        -:  355:/*will be used to transfer data when the parametr e is not writen.
        -:  356:will use the select function to modify the blocking of the read and write functions to read
        -:  357:from and write to a file discreptor.
        -:  358:*/
        1:  359:void transfer_data(int src_socket, int dest_socket)
        -:  360:{
        -:  361:    char buffer[1024];
        -:  362:    ssize_t bytes_read, bytes_written;
        -:  363:    fd_set read_fds;
       1*:  364:    int max_fd = src_socket > dest_socket ? src_socket : dest_socket;
        -:  365:    while (true)
        -:  366:    {
       85:  367:        FD_ZERO(&read_fds);
        5:  368:        FD_SET(src_socket, &read_fds);
        5:  369:        FD_SET(dest_socket, &read_fds);
        5:  370:        int activity = select(max_fd + 1, &read_fds, NULL, NULL, NULL);
        5:  371:        if (activity < 0)
        -:  372:        {
    #####:  373:            perror("select");
    #####:  374:            break;
        -:  375:        }
        5:  376:        if (FD_ISSET(src_socket, &read_fds))
        -:  377:        {
        2:  378:            bytes_read = read(src_socket, buffer, sizeof(buffer));
        2:  379:            if (bytes_read <= 0)
    #####:  380:                break;
        2:  381:            bytes_written = write(dest_socket, buffer, bytes_read);
        2:  382:            if (bytes_written <= 0)
    #####:  383:                break;
        -:  384:        }
        5:  385:        if (FD_ISSET(dest_socket, &read_fds))
        -:  386:        {
        3:  387:            bytes_read = read(dest_socket, buffer, sizeof(buffer));
        3:  388:            if (bytes_read <= 0)
        1:  389:                break;
        2:  390:            bytes_written = write(src_socket, buffer, bytes_read);
        2:  391:            if (bytes_written <= 0)
    #####:  392:                break;
        -:  393:        }
        4:  394:    }
        1:  395:}
        -:  396:
        -:  397:/*
        -:  398:will run a chat like comunication that will allow 2 sides of mync to comunicate.(like in nc).
        -:  399: */
        1:  400:void chat_handler(char *socket_type)
        -:  401:{
        1:  402:    char type[5] = {0};
        1:  403:    char *port = socket_type + 4;
        -:  404:    int sock, clintsock;
        1:  405:    strncpy(type, socket_type, 4);
        1:  406:    type[4] = '\0';
        1:  407:    if (strcmp(type, "TCPS") == 0)
        -:  408:    {
    #####:  409:        sock = server_tcp_socket(atoi(port));
    #####:  410:        clintsock = accept(sock, NULL, NULL);
    #####:  411:        if (clintsock < 0)
        -:  412:        {
    #####:  413:            perror("accept");
    #####:  414:            close(sock);
    #####:  415:            return;
        -:  416:        }
    #####:  417:        transfer_data(clintsock, STDIN_FILENO);
    #####:  418:        close(clintsock);
    #####:  419:        close(sock);
        -:  420:    }
        1:  421:    else if (strcmp(type, "TCPC") == 0)
        -:  422:    {
        1:  423:        sock = client_tcp_socket(atoi(port));
        1:  424:        if (sock < 0)
        -:  425:        {
    #####:  426:            perror("connect");
    #####:  427:            return;
        -:  428:        }
        1:  429:        transfer_data(STDIN_FILENO, sock);
        1:  430:        close(sock);
        -:  431:    }
        -:  432:}
        -:  433:
        -:  434:/* will use the flags that is passed from the getopt function and will use the function that corespond to this flag
        -:  435:in the flag list that we allow on this ex.
        -:  436:*/
       19:  437:void run(int argc, char *argv[])
        -:  438:{
       19:  439:    char *eflag = NULL;
       19:  440:    char *input = NULL;
       19:  441:    char *output = NULL;
       19:  442:    char *both = NULL;
       19:  443:    char *timeout = NULL;
       19:  444:    int opt = 0;
       19:  445:    flags_detector(argc, argv, eflag, input, output, both, opt, timeout);
       19:  446:    if (eflag == NULL)
        -:  447:    {
        1:  448:        chat_handler(argv[1]);
        -:  449:    }
        -:  450:    else
        -:  451:    {
       18:  452:        if (input != NULL)
        -:  453:        {
        7:  454:            i_flag(input, timeout);
        -:  455:        }
       18:  456:        if (output != NULL)
        -:  457:        {
        7:  458:            o_flag(output, timeout);
        -:  459:        }
       18:  460:        if (both != NULL)
        -:  461:        {
        4:  462:            b_flag(both);
        -:  463:        }
       18:  464:        if (eflag != NULL)
        -:  465:        {
       18:  466:            exe_ttt(eflag);
        -:  467:        }
        -:  468:    }
        1:  469:}
        -:  470:
        -:  471:/*
        -:  472:main function to run the program.
        -:  473:will call the flags_handler function that will use each flag that the command line includes.
        -:  474:*/
       19:  475:int main(int argc, char *argv[])
        -:  476:{
       19:  477:    run(argc, argv);
        1:  478:    return 0;
        -:  479:}
